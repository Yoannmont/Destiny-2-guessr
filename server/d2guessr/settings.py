"""
Django settings for d2guessr project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

from configurations import Configuration, values
from dotenv import load_dotenv

BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(dotenv_path=BASE_DIR / ".env")


class Dev(Configuration):
    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    NAME = "DEV"

    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = "TestingKEY132456789"

    # SECURITY WARNING: don't un with debug turned on in production!
    DEBUG = True

    SOCIAL_AUTH_URL_NAMESPACE = "social"

    SOCIAL_AUTH_BUNGIE_API_KEY = values.SecretValue(environ_prefix=NAME)

    SOCIAL_AUTH_BUNGIE_KEY = values.SecretValue(environ_prefix=NAME)

    SOCIAL_AUTH_BUNGIE_SECRET = values.SecretValue(environ_prefix=NAME)

    SOCIAL_AUTH_BUNGIE_ORIGIN = values.Value(environ_prefix=NAME)

    HOST_IP = values.Value(environ_prefix=NAME)

    SOCIAL_AUTH_REDIRECT_IS_HTTPS = True

    @property
    def ALLOWED_HOSTS(self):
        return ["localhost", str(self.HOST_IP), str(self.SOCIAL_AUTH_BUNGIE_ORIGIN).lstrip("https://"), ".onrender.com"]

    # Application definition

    INSTALLED_APPS = [
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.staticfiles",
        "django.contrib.postgres",
        "django.contrib.messages",
        "corsheaders",
        "rest_framework",
        "d2guessrlib",
        "django_filters",
        "d2guessrauth",
        "social_django",
        "drf_yasg",
        "rest_framework_simplejwt.token_blacklist",
        "ip_filter",
        "whitenoise.runserver_nostatic",
    ]

    MIDDLEWARE = [
        "log_request_id.middleware.RequestIDMiddleware",
        "django.middleware.security.SecurityMiddleware",
        "django.contrib.sessions.middleware.SessionMiddleware",
        "corsheaders.middleware.CorsMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
        "d2guessr.middleware.restrict_admin_ip.RestrictAdminIPMiddleware",
        "whitenoise.middleware.WhiteNoiseMiddleware",
    ]

    # Logging
    LOGGING_PATH = os.path.join(BASE_DIR, "logs")

    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "filters": {"request_id": {"()": "log_request_id.filters.RequestIDFilter"}},
        "formatters": {
            "verbose": {
                "format": "{asctime} - [{levelname}][d2guessr.{module}][{request_id}] {message}",
                "style": "{",
            }
        },
        "handlers": {
            "console": {
                "class": "logging.StreamHandler",
                "stream": "ext://sys.stdout",
                "formatter": "verbose",
                "filters": ["request_id"],
            },
            "debug_file": {
                "class": "concurrent_log_handler.ConcurrentRotatingFileHandler",
                "level": "DEBUG",
                "formatter": "verbose",
                "filename": os.path.join(LOGGING_PATH, "debug.log"),
            },
            "error_file": {
                "class": "concurrent_log_handler.ConcurrentRotatingFileHandler",
                "level": "ERROR",
                "formatter": "verbose",
                "filename": os.path.join(LOGGING_PATH, "error.log"),
            },
        },
        "loggers": {
            "social": {"handlers": ["console", "debug_file", "error_file"], "level": "DEBUG", "propagate": False},
            "requests": {"handlers": ["console", "debug_file", "error_file"], "level": "DEBUG", "propagate": False},
        },
        "root": {"handlers": ["console", "debug_file", "error_file"], "level": "DEBUG"},
    }
    NO_REQUEST_ID = "????????"
    ROOT_URLCONF = "d2guessr.urls"

    TEMPLATES = [
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "DIRS": ["templates"],
            "APP_DIRS": True,
            "OPTIONS": {
                "context_processors": [
                    "django.template.context_processors.debug",
                    "django.template.context_processors.request",
                    "django.contrib.auth.context_processors.auth",
                    "django.contrib.messages.context_processors.messages",
                    "social_django.context_processors.backends",
                    "social_django.context_processors.login_redirect",
                ],
            },
        },
    ]

    WSGI_APPLICATION = "d2guessr.wsgi.application"

    # Database
    # https://docs.djangoproject.com/en/5.0/ref/settings/#databases

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": "d2guessr_db.sqlite3",
            "USER": "",
            "PASSWORD": "",
            "HOST": "",
            "PORT": "",
        }
    }

    # Password validation
    # https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
        },
    ]

    # Internationalization
    # https://docs.djangoproject.com/en/5.0/topics/i18n/

    LANGUAGE_CODE = "en-us"

    TIME_ZONE = "UTC"

    USE_I18N = True

    USE_TZ = True

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/5.0/howto/static-files/

    STATIC_URL = "static/"
    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles", "static")
    MEDIA_URLS = "/media/"
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")

    # Default primary key field type
    # https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

    # Cors parameters
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOW_CREDENTIALS = True

    @property
    def CORS_ALLOWED_ORIGINS(self):
        return ["http://localhost:4200", str(self.FRONTEND_URL)]

    CORS_ALLOW_METHODS = (
        "GET",
        "POST",
        "OPTIONS",
    )

    SESSION_ENGINE = "django.contrib.sessions.backends.db"

    CACHE_TTL = 900

    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "unique-snowflake",
        }
    }

    REST_FRAMEWORK = {
        "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
        "PAGE_SIZE": 100,
        "DEFAULT_FILTER_BACKENDS": [
            "django_filters.rest_framework.DjangoFilterBackend",
            "rest_framework.filters.OrderingFilter",
            "rest_framework.filters.SearchFilter",
        ],
        "DEFAULT_AUTHENTICATION_CLASSES": ("rest_framework_simplejwt.authentication.JWTAuthentication",),
        "DEFAULT_THROTTLE_CLASSES": [
            "rest_framework.throttling.AnonRateThrottle",
            "rest_framework.throttling.UserRateThrottle",
        ],
        "DEFAULT_THROTTLE_RATES": {"anon": "5000/hour", "user": "200000/hour"},
    }

    SITE_ID = 1

    AUTHENTICATION_BACKENDS = (
        "django.contrib.auth.backends.ModelBackend",
        "d2guessrauth.bungie.oauth_client.BungieClient",
    )

    # Bungie info

    SOCIAL_AUTH_PIPELINE = (
        "d2guessrauth.bungie.pipeline.use_existing_user_if_authenticated",
        # Get the information we can about the user and return it in a simple
        # format to create the user instance later. On some cases the details are
        # already part of the auth response from the provider, but sometimes this
        # could hit a provider API.
        "social_core.pipeline.social_auth.social_details",
        # Get the social uid from whichever service we're authing thru. The uid is
        # the unique identifier of the given user in the provider.
        "social_core.pipeline.social_auth.social_uid",
        # Verifies that the current auth process is valid within the current
        # project, this is where emails and domains whitelists are applied (if
        # defined).
        # "d2guessrauth.bungie.pipeline.associate_user_from_state",
        # Super'ed in bungie.py
        "social_core.pipeline.social_auth.auth_allowed",
        # Checks if the current social-account is already associated in the site.
        "social_core.pipeline.social_auth.social_user",
        # Make up a username for this person, appends a random string at the end if
        # there's any collision.
        "social_core.pipeline.user.get_username",
        # Redirect to an @partial view to get missing user information here.
        # If you wish to validate or associate by email, this is required.
        # '<my_app>.pipeline.required_user_information',&
        # Send a validation email to the user to verify its email address.
        # Disabled by default.
        # 'social_core.pipeline.mail.mail_validation',
        # Associates the current social details with another user account with
        # a similar email address. Disabled by default.
        # 'social_core.pipeline.social_auth.associate_by_email',
        # Create a user account if we haven't found one yet.
        "social_core.pipeline.user.create_user",
        # Create the record that associates the social account with the user.
        "social_core.pipeline.social_auth.associate_user",
        # Populate the extra_data field in the social record with the values
        # specified by settings (and the default ones like access_token, etc).
        "social_core.pipeline.social_auth.load_extra_data",
        "d2guessrauth.bungie.pipeline.choose_destiny_membership",
        # Update the user record with any changed info from the auth service.
        "d2guessrauth.bungie.pipeline.create_or_update_bungie_user_account",
        "d2guessrauth.bungie.pipeline.create_or_update_bungie_account_inventory",
        "d2guessrauth.bungie.pipeline.bungie_association_complete",
    )

    SOCIAL_AUTH_DISCONNECT_PIPELINE = (
        # Verifies that the social association can be disconnected from the current
        # user (ensure that the user login mechanism is not compromised by this
        # disconnection).
        # "social_core.pipeline.disconnect.allowed_to_disconnect",
        # Collects the social associations to disconnect.
        "social_core.pipeline.disconnect.get_entries",
        # Revoke any access_token when possible.
        "social_core.pipeline.disconnect.revoke_tokens",
        # Removes the social associations.
        "social_core.pipeline.disconnect.disconnect",
        # Remove db user instance and inventory info
        "d2guessrauth.bungie.pipeline.disconnect_bungie_account",
    )

    FRONTEND_URL = values.Value(environ_prefix=NAME)

    @property
    def SOCIAL_AUTH_BUNGIE_FRONTEND_CALLBACK_URL(self):
        return str(self.FRONTEND_URL) + "/#/auth-callback"

    @property
    def SOCIAL_AUTH_BUNGIE_FRONTEND_MEMBERSHIP_SELECTION_URL(self):
        return str(self.FRONTEND_URL) + "/#/select-membership"

    @property
    def SOCIAL_AUTH_BUNGIE_FRONTEND_ERROR_URL(self):
        return str(self.FRONTEND_URL) + "/#/auth-error"

    SOCIAL_AUTH_REQUESTS_TIMEOUT = 5

    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SAMESITE = "None"

    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_SAMESITE = "None"

    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = "DENY"
    SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"

    @property
    def CSRF_TRUSTED_ORIGINS(self):
        return (str(self.SOCIAL_AUTH_BUNGIE_ORIGIN),)

    ACTIVATE_MOCKUPS = False

    # JWT settings
    SIMPLE_JWT = {
        "ACCESS_TOKEN_LIFETIME": timedelta(minutes=10),
        "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
        "ROTATE_REFRESH_TOKENS": True,
        "BLACKLIST_AFTER_ROTATION": True,
    }

    # Swagger settings
    SWAGGER_SETTINGS = {
        "SECURITY_DEFINITIONS": {
            "Bearer": {
                "type": "apiKey",
                "name": "Authorization",
                "in": "header",
                "description": 'JWT Authorization header using the Bearer scheme. Example: "Bearer <your_token>"',
            }
        },
        "USE_SESSION_AUTH": False,
    }
    SWAGGER_USE_COMPAT_RENDERERS = False


class Test(Dev):
    NAME = "TEST"
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": "test.sqlite3",
            "USER": "",
            "PASSWORD": "",
            "HOST": "",
            "PORT": "",
        }
    }
    INSTALLED_APPS = Dev.INSTALLED_APPS + [
        "mockups",
    ]
    ACTIVATE_MOCKUPS = True
    SOCIAL_AUTH_REDIRECT_IS_HTTPS = False
    SOCIAL_AUTH_BUNGIE_API_KEY = "dummy_api_key"
    SOCIAL_AUTH_BUNGIE_KEY = "dummy_client_id"
    SOCIAL_AUTH_BUNGIE_SECRET = "dummy_secret_key"

    @property
    def SOCIAL_AUTH_BUNGIE_FRONTEND_MEMBERSHIP_SELECTION_URL(self):
        return "http://localhost:8000/mock-frontend/membership-selection/"

    @property
    def SOCIAL_AUTH_BUNGIE_FRONTEND_CALLBACK_URL(self):
        return "http://localhost:8000/mock-frontend/auth-callback/"


class Prod(Dev):
    NAME = "PROD"

    DATABASES = values.DatabaseURLValue(environ_prefix=NAME)

    DEBUG = False
    STATIC_ROOT = os.path.join(BASE_DIR, "static")

    SOCIAL_AUTH_JSONFIELD_ENABLED = True

    SOCIAL_AUTH_BUNGIE_FRONTEND_CALLBACK_URL = "?????"


class Preview(Dev):
    NAME = "PREVIEW"
    DEBUG = False

    FRONTEND_URL = values.Value(environ_prefix=NAME)
    SOCIAL_AUTH_BUNGIE_API_KEY = values.SecretValue(environ_prefix=NAME)
    SOCIAL_AUTH_BUNGIE_KEY = values.SecretValue(environ_prefix=NAME)
    SOCIAL_AUTH_BUNGIE_SECRET = values.SecretValue(environ_prefix=NAME)
    SOCIAL_AUTH_BUNGIE_ORIGIN = values.Value(environ_prefix=NAME)
    HOST_IP = values.Value(environ_prefix=NAME)
    CORS_ALLOW_ALL_ORIGINS = False
    DATABASES = values.DatabaseURLValue(environ_prefix=NAME)

    FRONTEND_URL = values.Value(environ_prefix=NAME)
    SOCIAL_AUTH_BUNGIE_API_KEY = values.SecretValue(environ_prefix=NAME)

    SOCIAL_AUTH_BUNGIE_KEY = values.SecretValue(environ_prefix=NAME)

    SOCIAL_AUTH_BUNGIE_SECRET = values.SecretValue(environ_prefix=NAME)

    SOCIAL_AUTH_BUNGIE_ORIGIN = values.Value(environ_prefix=NAME)

    @property
    def ALLOWED_HOSTS(self):
        return ["localhost", str(self.HOST_IP), str(self.SOCIAL_AUTH_BUNGIE_ORIGIN).lstrip("https://"), ".onrender.com"]
